{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4662c0d4-e937-4810-bf02-0984fda0c442",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5f7b901e-46f3-4980-abfe-d8f9027137f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2017_Feb = pd.read_csv(\"2017-Feb.csv\")\n",
    "data_2017_Aug = pd.read_csv(\"2017-Aug.csv\")\n",
    "data_2018_Feb = pd.read_csv(\"2018-Feb.csv\")\n",
    "data_2018_Aug = pd.read_csv(\"2018-Aug.csv\")\n",
    "data_2019_Feb = pd.read_csv(\"2019-Feb.csv\")\n",
    "data_2019_Aug = pd.read_csv(\"2019-Aug.csv\")\n",
    "data_2020_Feb = pd.read_csv(\"2020-Feb.csv\")\n",
    "data_2020_Aug = pd.read_csv(\"2020-Aug.csv\")\n",
    "data_2021_Feb = pd.read_csv(\"2021-Feb.csv\")\n",
    "data_2021_Aug = pd.read_csv(\"2021-Aug.csv\")\n",
    "data_2022_Feb = pd.read_csv(\"2022-Feb.csv\")\n",
    "data_2022_Aug = pd.read_csv(\"2022-Aug.csv\")\n",
    "data_2023_Feb = pd.read_csv(\"2023-Feb.csv\")\n",
    "data_2023_Aug = pd.read_csv(\"2023-Aug.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "84f3c11c-681e-45ed-ac99-003c309f3118",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>LKATADS</th>\n",
       "      <th>LKANSADS</th>\n",
       "      <th>LKOTHERN</th>\n",
       "      <th>PRIORACT</th>\n",
       "      <th>YNOLOOK</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>16</td>\n",
       "      <td>3.0</td>\n",
       "      <td>279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>241</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "0        1      2017         2        4    35    0       8    NaN    2   \n",
       "1        2      2017         2        1    59    9       3    5.0    1   \n",
       "2        3      2017         2        1    59    0       3    5.0    2   \n",
       "3        4      2017         2        4    35    0       9    NaN    1   \n",
       "4        5      2017         2        3    24    0      11    NaN    1   \n",
       "5        6      2017         2        1    35    3       4    NaN    1   \n",
       "6        7      2017         2        1    12    0       4    NaN    2   \n",
       "7        8      2017         2        4    24    0      12    NaN    1   \n",
       "8        9      2017         2        4    59    0      11    NaN    2   \n",
       "9       10      2017         2        4    35    0      12    NaN    1   \n",
       "\n",
       "   MARSTAT  ...  LKATADS  LKANSADS  LKOTHERN  PRIORACT  YNOLOOK  TLOLOOK  \\\n",
       "0        5  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "1        6  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "2        1  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "3        5  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "4        1  ...      NaN       1.0       1.0       2.0      NaN      NaN   \n",
       "5        2  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "6        1  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "7        2  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "8        5  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "9        1  ...      NaN       NaN       NaN       NaN      NaN      NaN   \n",
       "\n",
       "   SCHOOLN  EFAMTYPE  AGYOWNK  FINALWT  \n",
       "0      1.0        16      3.0      279  \n",
       "1      1.0         1      NaN      636  \n",
       "2      1.0         8      NaN      109  \n",
       "3      1.0        11      NaN      242  \n",
       "4      NaN        11      NaN       83  \n",
       "5      1.0         2      NaN      722  \n",
       "6      1.0         3      1.0      111  \n",
       "7      NaN        11      NaN      126  \n",
       "8      NaN         1      NaN      197  \n",
       "9      NaN        10      NaN      241  \n",
       "\n",
       "[10 rows x 60 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2017_Feb.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c165a65d-5861-40f8-b3cf-3057185fcf95",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Append all the datasets \n",
    "df       = pd.concat([data_2017_Feb, \n",
    "                      data_2017_Aug,\n",
    "                      data_2018_Feb,\n",
    "                      data_2018_Aug,\n",
    "                      data_2019_Feb,\n",
    "                      data_2019_Aug,\n",
    "                      data_2020_Feb,\n",
    "                      data_2020_Aug,\n",
    "                      data_2021_Feb,\n",
    "                      data_2021_Aug,\n",
    "                      data_2021_Feb,\n",
    "                      data_2022_Feb,\n",
    "                      data_2022_Aug,\n",
    "                      data_2023_Feb,\n",
    "                      data_2023_Aug], ignore_index=True)\n",
    "\n",
    "# Save the data frame\n",
    "df.to_csv(\"df.csv\",index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f9eef3d",
   "metadata": {},
   "source": [
    "### Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "99ae91e9-4746-4e3c-b4dd-298f83ee0ebc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "56e66c12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>LKANSADS</th>\n",
       "      <th>LKOTHERN</th>\n",
       "      <th>PRIORACT</th>\n",
       "      <th>YNOLOOK</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "      <th>NOC_43</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>722</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>218</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476889</th>\n",
       "      <td>103397</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>258</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>320</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>213</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>71</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>735357 rows Ã— 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "5              6      2017         2        1    35    3       4    NaN    1   \n",
       "6              7      2017         2        1    12    0       4    NaN    2   \n",
       "12            13      2017         2        1    24    0       4    NaN    1   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476889   103397      2023         8        1    35    4       8    NaN    1   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  LKANSADS  LKOTHERN  PRIORACT  YNOLOOK  TLOLOOK  \\\n",
       "1              6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "2              1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "5              2  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "6              1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "12             6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "...          ...  ...       ...       ...       ...      ...      ...   \n",
       "1476889        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476891        5  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476892        2  ...       1.0       NaN       3.0      NaN      NaN   \n",
       "1476893        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476895        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "\n",
       "         SCHOOLN  EFAMTYPE  AGYOWNK  FINALWT  NOC_43  \n",
       "1            1.0         1      NaN      636     NaN  \n",
       "2            1.0         8      NaN      109     NaN  \n",
       "5            1.0         2      NaN      722     NaN  \n",
       "6            1.0         3      1.0      111     NaN  \n",
       "12           1.0         1      NaN      218     NaN  \n",
       "...          ...       ...      ...      ...     ...  \n",
       "1476889      1.0         4      4.0      258    12.0  \n",
       "1476891      1.0        15      4.0      320     2.0  \n",
       "1476892      1.0         9      1.0      213    13.0  \n",
       "1476893      1.0         3      1.0       71    16.0  \n",
       "1476895      1.0         3      1.0      123     8.0  \n",
       "\n",
       "[735357 rows x 61 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.query('(LFSSTAT != 4) & (SCHOOLN != 2) & (AGE_12 <= 9) & (AGE_12 >= 2)')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "dc7d5080",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>labor force status</th>\n",
       "      <th>age group classification</th>\n",
       "      <th>gender</th>\n",
       "      <th>immigration status</th>\n",
       "      <th>tenure</th>\n",
       "      <th>hourly wage</th>\n",
       "      <th>duration of unemployment (weeks)</th>\n",
       "      <th>student status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>735357.00</td>\n",
       "      <td>735357.00</td>\n",
       "      <td>735357.00</td>\n",
       "      <td>735357.00</td>\n",
       "      <td>688797.00</td>\n",
       "      <td>597897.00</td>\n",
       "      <td>42459.00</td>\n",
       "      <td>735357.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.23</td>\n",
       "      <td>5.78</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.74</td>\n",
       "      <td>92.42</td>\n",
       "      <td>29.91</td>\n",
       "      <td>17.30</td>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.55</td>\n",
       "      <td>2.20</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.58</td>\n",
       "      <td>81.31</td>\n",
       "      <td>14.68</td>\n",
       "      <td>20.57</td>\n",
       "      <td>0.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>240.00</td>\n",
       "      <td>197.44</td>\n",
       "      <td>99.00</td>\n",
       "      <td>3.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       labor force status  age group classification     gender  \\\n",
       "count           735357.00                 735357.00  735357.00   \n",
       "mean                 1.23                      5.78       1.49   \n",
       "std                  0.55                      2.20       0.50   \n",
       "min                  1.00                      2.00       1.00   \n",
       "max                  3.00                      9.00       2.00   \n",
       "\n",
       "       immigration status     tenure  hourly wage  \\\n",
       "count           735357.00  688797.00    597897.00   \n",
       "mean                 2.74      92.42        29.91   \n",
       "std                  0.58      81.31        14.68   \n",
       "min                  1.00       1.00         2.00   \n",
       "max                  3.00     240.00       197.44   \n",
       "\n",
       "       duration of unemployment (weeks)  student status  \n",
       "count                          42459.00       735357.00  \n",
       "mean                              17.30            1.03  \n",
       "std                               20.57            0.26  \n",
       "min                                1.00            1.00  \n",
       "max                               99.00            3.00  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rename(columns={'IMMIG':'immigration status',\n",
    "                  'SCHOOLN':'student status',\n",
    "                  'DURUNEMP':'duration of unemployment (weeks)',\n",
    "                  'TENURE':'tenure',\n",
    "                  'AGE_12':'age group classification',\n",
    "                  'SEX':'gender',\n",
    "                  'HRLYEARN':'hourly wage',\n",
    "                  'LFSSTAT':'labor force status'},\n",
    "                  inplace=True)\n",
    "\n",
    "summary_statistics = df[['labor force status', \n",
    "                         'age group classification', \n",
    "                         'gender',\n",
    "                         'immigration status',\n",
    "                         'tenure',\n",
    "                         'hourly wage',\n",
    "                         'duration of unemployment (weeks)',\n",
    "                         'student status']].describe()\n",
    "\n",
    "summary_statistics = summary_statistics.loc[['count', 'mean', 'std', 'min', 'max']]\n",
    "\n",
    "summary_statistics = summary_statistics.round(2)\n",
    "\n",
    "summary_statistics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "7b57a8f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "immigration status\n",
       "3    593787\n",
       "2     89453\n",
       "1     52117\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['immigration status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "8bb72aa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['immigrant'] = 0\n",
    "df.loc[df['immigration status'] != 3, 'immigrant'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "98aa51de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>immigration status</th>\n",
       "      <th>immigrant</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476889</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>735357 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         immigration status  immigrant\n",
       "1                         3          0\n",
       "2                         3          0\n",
       "5                         3          0\n",
       "6                         3          0\n",
       "12                        3          0\n",
       "...                     ...        ...\n",
       "1476889                   2          1\n",
       "1476891                   3          0\n",
       "1476892                   3          0\n",
       "1476893                   3          0\n",
       "1476895                   2          1\n",
       "\n",
       "[735357 rows x 2 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['immigration status','immigrant']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e4df2cbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "immigration_counts = df['immigration status'].value_counts()\n",
    "proportion = immigration_counts / len(df['immigration status'])\n",
    "\n",
    "plt.pie(proportion, labels=immigration_status_index,autopct='%1.1f%%')\n",
    "plt.title('Distribution of Immigration Status')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ac64e1b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>labor force status</th>\n",
       "      <th>immigration status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>735357.000000</td>\n",
       "      <td>735357.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.234134</td>\n",
       "      <td>2.736608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.553126</td>\n",
       "      <td>0.579451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       labor force status  immigration status\n",
       "count       735357.000000       735357.000000\n",
       "mean             1.234134            2.736608\n",
       "std              0.553126            0.579451\n",
       "min              1.000000            1.000000\n",
       "25%              1.000000            3.000000\n",
       "50%              1.000000            3.000000\n",
       "75%              1.000000            3.000000\n",
       "max              3.000000            3.000000"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['labor force status','immigration status']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f69ff3ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unemployed</th>\n",
       "      <th>immigration status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476889</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>735357 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         unemployed  immigration status\n",
       "1                 1                   3\n",
       "2                 1                   3\n",
       "5                 1                   3\n",
       "6                 1                   3\n",
       "12                1                   3\n",
       "...             ...                 ...\n",
       "1476889           0                   2\n",
       "1476891           1                   3\n",
       "1476892           1                   3\n",
       "1476893           1                   3\n",
       "1476895           0                   2\n",
       "\n",
       "[735357 rows x 2 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['unemployed'] = 0\n",
    "df.loc[df['immigration status'] == 3, 'unemployed'] = 1\n",
    "\n",
    "df[['unemployed','immigration status']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "bc605afb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "immigration status\n",
       "1    0.0\n",
       "2    0.0\n",
       "3    1.0\n",
       "Name: unemployed, dtype: float64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('immigration status')['unemployed'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "89c634c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "immigration status\n",
       "3    593787\n",
       "2     89453\n",
       "1     52117\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "immigration_counts = df['immigration status'].value_counts()\n",
    "immigration_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "cd0e542b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>labor force status</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>immigration status</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>43882</td>\n",
       "      <td>4280</td>\n",
       "      <td>3955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76233</td>\n",
       "      <td>7967</td>\n",
       "      <td>5253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>489630</td>\n",
       "      <td>66805</td>\n",
       "      <td>37352</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "labor force status       1      2      3\n",
       "immigration status                      \n",
       "1                    43882   4280   3955\n",
       "2                    76233   7967   5253\n",
       "3                   489630  66805  37352"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_tab = pd.crosstab(df['immigration status'], df['labor force status'])\n",
    "cross_tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "9e578fc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unemployed  immigration status\n",
       "0           3                     556435\n",
       "            2                      84200\n",
       "            1                      48162\n",
       "1           3                      37352\n",
       "            2                       5253\n",
       "            1                       3955\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['unemployed'] = 0\n",
    "df.loc[df['labor force status'] == 3, 'unemployed'] = 1\n",
    "\n",
    "df[['unemployed', 'immigration status']].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "65480d8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>immigration status</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52117.0</td>\n",
       "      <td>0.075887</td>\n",
       "      <td>0.264820</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>89453.0</td>\n",
       "      <td>0.058724</td>\n",
       "      <td>0.235108</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>593787.0</td>\n",
       "      <td>0.062905</td>\n",
       "      <td>0.242792</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count      mean       std  min  25%  50%  75%  max\n",
       "immigration status                                                       \n",
       "1                    52117.0  0.075887  0.264820  0.0  0.0  0.0  0.0  1.0\n",
       "2                    89453.0  0.058724  0.235108  0.0  0.0  0.0  0.0  1.0\n",
       "3                   593787.0  0.062905  0.242792  0.0  0.0  0.0  0.0  1.0"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('immigration status')['unemployed'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "101fa84a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "735357"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df['unemployed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "1075a2d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "735357"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df['immigration status'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "5032a6f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "immigration status\n",
       "1    7.588695\n",
       "2    5.872358\n",
       "3    6.290471\n",
       "Name: unemployed, dtype: float64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unemployment_rate = df.groupby('immigration status')['unemployed'].mean() * 100\n",
    "unemployment_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "95c5d01e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assuming unemployment_rate contains the calculated unemployment rates grouped by 'immigration status'\n",
    "# Assuming new_labels is a list containing the new category names in the same order as the categories in unemployment_rate\n",
    "\n",
    "# Create a list of new category names in the same order as the categories in unemployment_rate\n",
    "new_labels = ['Recent Immigrants', 'Established Immigrants', 'Non-immigrants']\n",
    "\n",
    "# Plotting the bar chart\n",
    "plt.figure(figsize=(8, 6))\n",
    "unemployment_rate.plot(kind='bar', color='skyblue')\n",
    "plt.title('Unemployment Rate by Immigration Status')\n",
    "plt.xlabel('Immigration Status')\n",
    "plt.ylabel('Unemployment Rate (%)')\n",
    "\n",
    "# Set custom labels for the x-axis\n",
    "plt.xticks(range(len(new_labels)), new_labels, rotation=0)\n",
    "\n",
    "plt.grid(axis='y', linestyle='--')#, alpha=0.7  # Add horizontal grid lines\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "d208b602",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>immigration status</th>\n",
       "      <th>hourly wage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>21.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>31.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "      <td>15.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>24.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476889</th>\n",
       "      <td>2</td>\n",
       "      <td>49.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>3</td>\n",
       "      <td>76.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>3</td>\n",
       "      <td>44.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>2</td>\n",
       "      <td>31.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>735357 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         immigration status  hourly wage\n",
       "1                         3          NaN\n",
       "2                         3        21.03\n",
       "5                         3        31.25\n",
       "6                         3        15.40\n",
       "12                        3        24.00\n",
       "...                     ...          ...\n",
       "1476889                   2        49.23\n",
       "1476891                   3        76.00\n",
       "1476892                   3          NaN\n",
       "1476893                   3        44.00\n",
       "1476895                   2        31.95\n",
       "\n",
       "[735357 rows x 2 columns]"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['immigration status','hourly wage']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "3082379e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>immigration status</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42654.0</td>\n",
       "      <td>25.951419</td>\n",
       "      <td>13.995861</td>\n",
       "      <td>3.13</td>\n",
       "      <td>16.25</td>\n",
       "      <td>21.635</td>\n",
       "      <td>31.25</td>\n",
       "      <td>192.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>69266.0</td>\n",
       "      <td>30.742451</td>\n",
       "      <td>15.918201</td>\n",
       "      <td>3.00</td>\n",
       "      <td>19.23</td>\n",
       "      <td>26.245</td>\n",
       "      <td>38.46</td>\n",
       "      <td>192.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>485977.0</td>\n",
       "      <td>30.134257</td>\n",
       "      <td>14.507336</td>\n",
       "      <td>2.00</td>\n",
       "      <td>19.50</td>\n",
       "      <td>26.670</td>\n",
       "      <td>38.08</td>\n",
       "      <td>197.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count       mean        std   min    25%     50%  \\\n",
       "immigration status                                                        \n",
       "1                    42654.0  25.951419  13.995861  3.13  16.25  21.635   \n",
       "2                    69266.0  30.742451  15.918201  3.00  19.23  26.245   \n",
       "3                   485977.0  30.134257  14.507336  2.00  19.50  26.670   \n",
       "\n",
       "                      75%     max  \n",
       "immigration status                 \n",
       "1                   31.25  192.31  \n",
       "2                   38.46  192.82  \n",
       "3                   38.08  197.44  "
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('immigration status')['hourly wage'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "810f7fab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "immigration status    0\n",
       "hourly wage           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.dropna(subset=['hourly wage'])\n",
    "df[['immigration status', 'hourly wage']].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "d9f5869e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jacky\\anaconda3\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "C:\\Users\\jacky\\anaconda3\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "C:\\Users\\jacky\\anaconda3\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Assuming df is your DataFrame containing the 'hourly wage' and 'immigration status' columns\n",
    "\n",
    "# Set the figure size\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot KDE for each category of 'immigration status' with custom labels\n",
    "for status in df['immigration status'].unique():\n",
    "    # Select 'hourly wage' values for the current category\n",
    "    wages = df[df['immigration status'] == status]['hourly wage']\n",
    "    \n",
    "    # Plot KDE for the current category with custom label\n",
    "    sns.kdeplot(wages, label=status)  # Use the original category value as label\n",
    "    \n",
    "# Add title and labels\n",
    "plt.title('Kernel Density Estimate of Hourly Wage by Immigration Status')\n",
    "plt.xlabel('Hourly Wage')\n",
    "plt.ylabel('Density')\n",
    "\n",
    "# Add legend with custom labels\n",
    "plt.legend(title='Immigration Status', labels=['Non-immigrants', 'Established Immigrants', 'Recent Immigrants'])\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ab36438",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "02bc4089",
   "metadata": {},
   "source": [
    "### Regression Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "898eb588",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "3af56c66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>LKANSADS</th>\n",
       "      <th>LKOTHERN</th>\n",
       "      <th>PRIORACT</th>\n",
       "      <th>YNOLOOK</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "      <th>NOC_43</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>722</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>320</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>213</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>71</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>103402</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>240</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "4              5      2017         2        3    24    0      11    NaN    1   \n",
       "5              6      2017         2        1    35    3       4    NaN    1   \n",
       "6              7      2017         2        1    12    0       4    NaN    2   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476894   103402      2023         8        1    12    0       1    1.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  LKANSADS  LKOTHERN  PRIORACT  YNOLOOK  TLOLOOK  \\\n",
       "1              6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "2              1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "4              1  ...       1.0       1.0       2.0      NaN      NaN   \n",
       "5              2  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "6              1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "...          ...  ...       ...       ...       ...      ...      ...   \n",
       "1476891        5  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476892        2  ...       1.0       NaN       3.0      NaN      NaN   \n",
       "1476893        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476894        6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476895        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "\n",
       "         SCHOOLN  EFAMTYPE  AGYOWNK  FINALWT  NOC_43  \n",
       "1            1.0         1      NaN      636     NaN  \n",
       "2            1.0         8      NaN      109     NaN  \n",
       "4            NaN        11      NaN       83     NaN  \n",
       "5            1.0         2      NaN      722     NaN  \n",
       "6            1.0         3      1.0      111     NaN  \n",
       "...          ...       ...      ...      ...     ...  \n",
       "1476891      1.0        15      4.0      320     2.0  \n",
       "1476892      1.0         9      1.0      213    13.0  \n",
       "1476893      1.0         3      1.0       71    16.0  \n",
       "1476894      1.0        14      NaN      240    31.0  \n",
       "1476895      1.0         3      1.0      123     8.0  \n",
       "\n",
       "[894039 rows x 61 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.query('(LFSSTAT != 4) & (SCHOOLN != 2)')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6994c115-a715-4371-b05d-dfc484a19a42",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['unemployed'] = 0\n",
    "df.loc[df['LFSSTAT'] == 3, 'unemployed'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3c35e2e1-2b1a-46df-aba3-bdae70f802a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>unemployed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         LFSSTAT  unemployed\n",
       "1              1           0\n",
       "2              1           0\n",
       "4              3           1\n",
       "5              1           0\n",
       "6              1           0\n",
       "...          ...         ...\n",
       "1476891        1           0\n",
       "1476892        3           1\n",
       "1476893        1           0\n",
       "1476894        1           0\n",
       "1476895        1           0\n",
       "\n",
       "[894039 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['LFSSTAT','unemployed']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5232629c-8410-4776-b28c-0f290b9e7fcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>PRIORACT</th>\n",
       "      <th>YNOLOOK</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "      <th>NOC_43</th>\n",
       "      <th>unemployed</th>\n",
       "      <th>immig</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>722</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>320</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>213</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>71</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>103402</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>240</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 63 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "4              5      2017         2        3    24    0      11    NaN    1   \n",
       "5              6      2017         2        1    35    3       4    NaN    1   \n",
       "6              7      2017         2        1    12    0       4    NaN    2   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476894   103402      2023         8        1    12    0       1    1.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  PRIORACT  YNOLOOK  TLOLOOK  SCHOOLN  EFAMTYPE  AGYOWNK  \\\n",
       "1              6  ...       NaN      NaN      NaN      1.0         1      NaN   \n",
       "2              1  ...       NaN      NaN      NaN      1.0         8      NaN   \n",
       "4              1  ...       2.0      NaN      NaN      NaN        11      NaN   \n",
       "5              2  ...       NaN      NaN      NaN      1.0         2      NaN   \n",
       "6              1  ...       NaN      NaN      NaN      1.0         3      1.0   \n",
       "...          ...  ...       ...      ...      ...      ...       ...      ...   \n",
       "1476891        5  ...       NaN      NaN      NaN      1.0        15      4.0   \n",
       "1476892        2  ...       3.0      NaN      NaN      1.0         9      1.0   \n",
       "1476893        1  ...       NaN      NaN      NaN      1.0         3      1.0   \n",
       "1476894        6  ...       NaN      NaN      NaN      1.0        14      NaN   \n",
       "1476895        1  ...       NaN      NaN      NaN      1.0         3      1.0   \n",
       "\n",
       "         FINALWT  NOC_43  unemployed  immig  \n",
       "1            636     NaN           0      0  \n",
       "2            109     NaN           0      0  \n",
       "4             83     NaN           1      0  \n",
       "5            722     NaN           0      0  \n",
       "6            111     NaN           0      0  \n",
       "...          ...     ...         ...    ...  \n",
       "1476891      320     2.0           0      0  \n",
       "1476892      213    13.0           1      0  \n",
       "1476893       71    16.0           0      0  \n",
       "1476894      240    31.0           0      0  \n",
       "1476895      123     8.0           0      1  \n",
       "\n",
       "[894039 rows x 63 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['immig'] = 0 \n",
    "df.loc[df['IMMIG'] !=3, 'immig'] = 1\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "89debe4e-0500-4322-a079-f8d0ac8160fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>YNOLOOK</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "      <th>NOC_43</th>\n",
       "      <th>unemployed</th>\n",
       "      <th>immig</th>\n",
       "      <th>postCOVID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>722</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>320</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>213</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>71</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>103402</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>240</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 64 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "4              5      2017         2        3    24    0      11    NaN    1   \n",
       "5              6      2017         2        1    35    3       4    NaN    1   \n",
       "6              7      2017         2        1    12    0       4    NaN    2   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476894   103402      2023         8        1    12    0       1    1.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  YNOLOOK  TLOLOOK  SCHOOLN  EFAMTYPE  AGYOWNK  FINALWT  \\\n",
       "1              6  ...      NaN      NaN      1.0         1      NaN      636   \n",
       "2              1  ...      NaN      NaN      1.0         8      NaN      109   \n",
       "4              1  ...      NaN      NaN      NaN        11      NaN       83   \n",
       "5              2  ...      NaN      NaN      1.0         2      NaN      722   \n",
       "6              1  ...      NaN      NaN      1.0         3      1.0      111   \n",
       "...          ...  ...      ...      ...      ...       ...      ...      ...   \n",
       "1476891        5  ...      NaN      NaN      1.0        15      4.0      320   \n",
       "1476892        2  ...      NaN      NaN      1.0         9      1.0      213   \n",
       "1476893        1  ...      NaN      NaN      1.0         3      1.0       71   \n",
       "1476894        6  ...      NaN      NaN      1.0        14      NaN      240   \n",
       "1476895        1  ...      NaN      NaN      1.0         3      1.0      123   \n",
       "\n",
       "         NOC_43  unemployed  immig  postCOVID  \n",
       "1           NaN           0      0          0  \n",
       "2           NaN           0      0          0  \n",
       "4           NaN           1      0          0  \n",
       "5           NaN           0      0          0  \n",
       "6           NaN           0      0          0  \n",
       "...         ...         ...    ...        ...  \n",
       "1476891     2.0           0      0          1  \n",
       "1476892    13.0           1      0          1  \n",
       "1476893    16.0           0      0          1  \n",
       "1476894    31.0           0      0          1  \n",
       "1476895     8.0           0      1          1  \n",
       "\n",
       "[894039 rows x 64 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['postCOVID'] = 0 \n",
    "df.loc[df['SURVYEAR'] >= 2022, 'postCOVID'] = 1 \n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9274d7ac-3124-4fa1-a0fc-dfd083f6417f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "      <th>NOC_43</th>\n",
       "      <th>unemployed</th>\n",
       "      <th>immig</th>\n",
       "      <th>postCOVID</th>\n",
       "      <th>interaction_term</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>722</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>320</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>213</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>71</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>103402</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>240</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 65 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "4              5      2017         2        3    24    0      11    NaN    1   \n",
       "5              6      2017         2        1    35    3       4    NaN    1   \n",
       "6              7      2017         2        1    12    0       4    NaN    2   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476894   103402      2023         8        1    12    0       1    1.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  TLOLOOK  SCHOOLN  EFAMTYPE  AGYOWNK  FINALWT  NOC_43  \\\n",
       "1              6  ...      NaN      1.0         1      NaN      636     NaN   \n",
       "2              1  ...      NaN      1.0         8      NaN      109     NaN   \n",
       "4              1  ...      NaN      NaN        11      NaN       83     NaN   \n",
       "5              2  ...      NaN      1.0         2      NaN      722     NaN   \n",
       "6              1  ...      NaN      1.0         3      1.0      111     NaN   \n",
       "...          ...  ...      ...      ...       ...      ...      ...     ...   \n",
       "1476891        5  ...      NaN      1.0        15      4.0      320     2.0   \n",
       "1476892        2  ...      NaN      1.0         9      1.0      213    13.0   \n",
       "1476893        1  ...      NaN      1.0         3      1.0       71    16.0   \n",
       "1476894        6  ...      NaN      1.0        14      NaN      240    31.0   \n",
       "1476895        1  ...      NaN      1.0         3      1.0      123     8.0   \n",
       "\n",
       "         unemployed  immig  postCOVID  interaction_term  \n",
       "1                 0      0          0                 0  \n",
       "2                 0      0          0                 0  \n",
       "4                 1      0          0                 0  \n",
       "5                 0      0          0                 0  \n",
       "6                 0      0          0                 0  \n",
       "...             ...    ...        ...               ...  \n",
       "1476891           0      0          1                 0  \n",
       "1476892           1      0          1                 0  \n",
       "1476893           0      0          1                 0  \n",
       "1476894           0      0          1                 0  \n",
       "1476895           0      1          1                 1  \n",
       "\n",
       "[894039 rows x 65 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['interaction_term'] = df['immig'] * df['postCOVID']\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60434a86-5028-4cb2-8448-46e92e149f25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEX</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         SEX  gender\n",
       "1          1       1\n",
       "2          2       0\n",
       "4          1       1\n",
       "5          1       1\n",
       "6          2       0\n",
       "...      ...     ...\n",
       "1476891    2       0\n",
       "1476892    1       1\n",
       "1476893    2       0\n",
       "1476894    2       0\n",
       "1476895    2       0\n",
       "\n",
       "[894039 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['gender'] = 0 \n",
    "df.loc[df['SEX'] == 1, 'gender'] = 1 \n",
    "\n",
    "df[['SEX','gender']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b2464ec0-1433-4446-b484-c9ee6e8e8a0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EDUC</th>\n",
       "      <th>educ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         EDUC  educ\n",
       "1           4     1\n",
       "2           5     1\n",
       "4           2     1\n",
       "5           5     1\n",
       "6           6     1\n",
       "...       ...   ...\n",
       "1476891     4     1\n",
       "1476892     3     1\n",
       "1476893     5     1\n",
       "1476894     1     0\n",
       "1476895     5     1\n",
       "\n",
       "[894039 rows x 2 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['educ'] = 0 \n",
    "df.loc[(df['EDUC'] != 0) & (df['EDUC'] != 1), 'educ'] = 1\n",
    "\n",
    "df[['EDUC','educ']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cad64bc1-496c-4c32-b2df-f7bc04fd7a27",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['unemployed','immig','postCOVID', 'interaction_term', 'gender', 'educ']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "972a8116-a59a-48ea-ac33-a59d1b3f0bb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.244867\n",
      "         Iterations 7\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:             unemployed   No. Observations:               894039\n",
      "Model:                          Logit   Df Residuals:                   894033\n",
      "Method:                           MLE   Df Model:                            5\n",
      "Date:                Fri, 10 May 2024   Pseudo R-squ.:                0.009736\n",
      "Time:                        01:45:11   Log-Likelihood:            -2.1892e+05\n",
      "converged:                       True   LL-Null:                   -2.2107e+05\n",
      "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
      "====================================================================================\n",
      "                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "const               -1.9207      0.012   -154.510      0.000      -1.945      -1.896\n",
      "immig                0.0307      0.013      2.399      0.016       0.006       0.056\n",
      "postCOVID           -0.2266      0.011    -20.466      0.000      -0.248      -0.205\n",
      "interaction_term     0.0048      0.024      0.197      0.844      -0.043       0.052\n",
      "gender               0.0330      0.009      3.876      0.000       0.016       0.050\n",
      "educ                -0.7582      0.012    -64.388      0.000      -0.781      -0.735\n",
      "====================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Extract features (X) and target variable (y)\n",
    "X = df[['immig','postCOVID', 'interaction_term', 'gender', 'educ']]  # Features (multiple X variables)\n",
    "y = df['unemployed']  # Target variable\n",
    "\n",
    "# Add constant term for intercept\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit logistic regression model\n",
    "model = sm.Logit(y, X)\n",
    "result = model.fit()\n",
    "\n",
    "# Print summary including coefficients, standard errors, p-values, and more\n",
    "print(result.summary())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44ed57b6-7712-45a4-84d6-4d7131e9599d",
   "metadata": {},
   "source": [
    "### Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0664d0af-8540-423d-8370-4d89ec2e2495",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>LKANSADS</th>\n",
       "      <th>LKOTHERN</th>\n",
       "      <th>PRIORACT</th>\n",
       "      <th>YNOLOOK</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "      <th>NOC_43</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>16</td>\n",
       "      <td>3.0</td>\n",
       "      <td>279</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>242</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>320</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>213</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>71</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>103402</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>240</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1476896 rows Ã— 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "0              1      2017         2        4    35    0       8    NaN    2   \n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "3              4      2017         2        4    35    0       9    NaN    1   \n",
       "4              5      2017         2        3    24    0      11    NaN    1   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476894   103402      2023         8        1    12    0       1    1.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  LKANSADS  LKOTHERN  PRIORACT  YNOLOOK  TLOLOOK  \\\n",
       "0              5  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1              6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "2              1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "3              5  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "4              1  ...       1.0       1.0       2.0      NaN      NaN   \n",
       "...          ...  ...       ...       ...       ...      ...      ...   \n",
       "1476891        5  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476892        2  ...       1.0       NaN       3.0      NaN      NaN   \n",
       "1476893        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476894        6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476895        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "\n",
       "         SCHOOLN  EFAMTYPE  AGYOWNK  FINALWT  NOC_43  \n",
       "0            1.0        16      3.0      279     NaN  \n",
       "1            1.0         1      NaN      636     NaN  \n",
       "2            1.0         8      NaN      109     NaN  \n",
       "3            1.0        11      NaN      242     NaN  \n",
       "4            NaN        11      NaN       83     NaN  \n",
       "...          ...       ...      ...      ...     ...  \n",
       "1476891      1.0        15      4.0      320     2.0  \n",
       "1476892      1.0         9      1.0      213    13.0  \n",
       "1476893      1.0         3      1.0       71    16.0  \n",
       "1476894      1.0        14      NaN      240    31.0  \n",
       "1476895      1.0         3      1.0      123     8.0  \n",
       "\n",
       "[1476896 rows x 61 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"df.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "47decf1a-c910-4c88-9d86-bfc6561d5891",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jacky\\AppData\\Local\\Temp\\ipykernel_24508\\679075939.py:8: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
      "  filtered_df = filtered_df[~condition_2]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>LKANSADS</th>\n",
       "      <th>LKOTHERN</th>\n",
       "      <th>PRIORACT</th>\n",
       "      <th>YNOLOOK</th>\n",
       "      <th>TLOLOOK</th>\n",
       "      <th>SCHOOLN</th>\n",
       "      <th>EFAMTYPE</th>\n",
       "      <th>AGYOWNK</th>\n",
       "      <th>FINALWT</th>\n",
       "      <th>NOC_43</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>636</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>722</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>320</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>213</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>71</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>103402</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>240</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>894039 rows Ã— 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "4              5      2017         2        3    24    0      11    NaN    1   \n",
       "5              6      2017         2        1    35    3       4    NaN    1   \n",
       "6              7      2017         2        1    12    0       4    NaN    2   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476894   103402      2023         8        1    12    0       1    1.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  LKANSADS  LKOTHERN  PRIORACT  YNOLOOK  TLOLOOK  \\\n",
       "1              6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "2              1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "4              1  ...       1.0       1.0       2.0      NaN      NaN   \n",
       "5              2  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "6              1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "...          ...  ...       ...       ...       ...      ...      ...   \n",
       "1476891        5  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476892        2  ...       1.0       NaN       3.0      NaN      NaN   \n",
       "1476893        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476894        6  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "1476895        1  ...       NaN       NaN       NaN      NaN      NaN   \n",
       "\n",
       "         SCHOOLN  EFAMTYPE  AGYOWNK  FINALWT  NOC_43  \n",
       "1            1.0         1      NaN      636     NaN  \n",
       "2            1.0         8      NaN      109     NaN  \n",
       "4            NaN        11      NaN       83     NaN  \n",
       "5            1.0         2      NaN      722     NaN  \n",
       "6            1.0         3      1.0      111     NaN  \n",
       "...          ...       ...      ...      ...     ...  \n",
       "1476891      1.0        15      4.0      320     2.0  \n",
       "1476892      1.0         9      1.0      213    13.0  \n",
       "1476893      1.0         3      1.0       71    16.0  \n",
       "1476894      1.0        14      NaN      240    31.0  \n",
       "1476895      1.0         3      1.0      123     8.0  \n",
       "\n",
       "[894039 rows x 61 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.query('(LFSSTAT != 4) & (SCHOOLN != 2)')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d384ab48-d3fc-49da-b139-db7cf5135543",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1          1\n",
       "2          1\n",
       "4          3\n",
       "5          1\n",
       "6          1\n",
       "          ..\n",
       "1476891    1\n",
       "1476892    3\n",
       "1476893    1\n",
       "1476894    1\n",
       "1476895    1\n",
       "Name: LFSSTAT, Length: 894039, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['LFSSTAT']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b5831dfc-98f5-4bee-93fc-d3ad72a7184c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['unemployed'] = 0\n",
    "df.loc[df['LFSSTAT'] == 3, 'unemployed'] = 1\n",
    "\n",
    "df['postCOVID'] = 0 \n",
    "df.loc[df['SURVYEAR'] >= 2022, 'postCOVID'] = 1\n",
    "\n",
    "df['RecentImm'] = 0 \n",
    "df.loc[df['IMMIG'] == 1, 'RecentImm'] = 1\n",
    "\n",
    "df['EstaImm'] = 0 \n",
    "df.loc[df['IMMIG'] == 2, 'EstaImm'] = 1\n",
    "\n",
    "df['interact_Recent'] = df['RecentImm'] * df['postCOVID']\n",
    "df['interact_Established'] = df['EstaImm'] * df['postCOVID']\n",
    "\n",
    "df['gender'] = 0\n",
    "df.loc[df['SEX'] == 1, 'gender'] = 1\n",
    "\n",
    "df['educ'] = 0 \n",
    "df.loc[(df['EDUC'] != 0) & (df['EDUC'] != 1), 'educ'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cad05781-b3a5-4e44-bbfa-1176d642a365",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06755745554724123"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['unemployed'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e69126c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "REC_NUM                 0\n",
       "SURVYEAR                0\n",
       "SURVMNTH                0\n",
       "LFSSTAT                 0\n",
       "PROV                    0\n",
       "                       ..\n",
       "EstaImm                 0\n",
       "interact_Recent         0\n",
       "interact_Established    0\n",
       "gender                  0\n",
       "educ                    0\n",
       "Length: 69, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7d81b716-d630-4f4a-bbb7-f140c2e0d2b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "#df = df.dropna(subset=['unemployed'])\n",
    "\n",
    "X = df[['RecentImm','EstaImm', 'postCOVID', 'interact_Recent', 'interact_Established', 'gender', 'educ']]\n",
    "y = df['unemployed']\n",
    "\n",
    "model = LogisticRegression()\n",
    "model.fit(X,y)\n",
    "\n",
    "predictions = model.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "92e41d5a-0722-4a63-b7f7-3c0bfd3b8e28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.244705\n",
      "         Iterations 7\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:             unemployed   No. Observations:               894039\n",
      "Model:                          Logit   Df Residuals:                   894031\n",
      "Method:                           MLE   Df Model:                            7\n",
      "Date:                Fri, 10 May 2024   Pseudo R-squ.:                 0.01039\n",
      "Time:                        01:45:43   Log-Likelihood:            -2.1878e+05\n",
      "converged:                       True   LL-Null:                   -2.2107e+05\n",
      "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
      "========================================================================================\n",
      "                           coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------\n",
      "const                   -1.9187      0.012   -154.339      0.000      -1.943      -1.894\n",
      "RecentImm                0.2371      0.019     12.373      0.000       0.200       0.275\n",
      "EstaImm                 -0.0888      0.016     -5.579      0.000      -0.120      -0.058\n",
      "postCOVID               -0.2265      0.011    -20.463      0.000      -0.248      -0.205\n",
      "interact_Recent          0.0450      0.036      1.253      0.210      -0.025       0.116\n",
      "interact_Established    -0.0124      0.030     -0.416      0.677      -0.071       0.046\n",
      "gender                   0.0323      0.009      3.792      0.000       0.016       0.049\n",
      "educ                    -0.7602      0.012    -64.532      0.000      -0.783      -0.737\n",
      "========================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Extract features (X) and target variable (y)\n",
    "X = df[['RecentImm','EstaImm', 'postCOVID', 'interact_Recent', 'interact_Established', 'gender', 'educ']]  # Features (multiple X variables)\n",
    "y = df['unemployed']  # Target variable\n",
    "\n",
    "# Add constant term for intercept\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit logistic regression model\n",
    "model = sm.Logit(y, X)\n",
    "result = model.fit()\n",
    "\n",
    "# Print summary including coefficients, standard errors, p-values, and more\n",
    "print(result.summary())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f952a297",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1935103d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['lwage'] = np.log(df['HRLYEARN'])\n",
    "\n",
    "df['immig'] = 0\n",
    "df.loc[df['IMMIG'] != 3, 'immig'] = 1\n",
    "\n",
    "df['gender'] = 0\n",
    "df.loc[df['SEX'] == 1, 'gender'] = 1\n",
    "\n",
    "df['educ'] = 0\n",
    "df.loc[(df['EDUC'] != 0) & (df['EDUC'] != 1), 'educ'] = 1\n",
    "\n",
    "df['married'] = 0 \n",
    "df.loc[df['MARSTAT'] == 1, 'married'] = 1\n",
    "\n",
    "df['fulltime'] = 0 \n",
    "df.loc[df['FTPTMAIN'] == 1, 'fulltime'] = 1\n",
    "\n",
    "df['union'] = 0\n",
    "df.loc[df['UNION'] == 1, 'union'] = 1\n",
    "\n",
    "df['perm'] = 0\n",
    "df.loc[df['PERMTEMP'] == 1, 'perm'] = 1\n",
    "\n",
    "df['large_firm'] = 0\n",
    "df.loc[(df['FIRMSIZE'] != 1) & (df['FIRMSIZE'] != 2), 'large_firm'] = 1\n",
    "\n",
    "df['postCOVID'] = 0\n",
    "df.loc[df['SURVYEAR'] >= 2022, 'postCOVID'] = 1\n",
    "\n",
    "df['interaction_term'] = df['immig'] * df['postCOVID']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "73f11a79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "lwage               3.235493\n",
       "immig               0.184229\n",
       "gender              0.486489\n",
       "educ                0.833986\n",
       "married             0.486791\n",
       "fulltime            0.478908\n",
       "union               0.154345\n",
       "perm                0.435781\n",
       "large_firm          0.824076\n",
       "postCOVID           0.286469\n",
       "interaction_term    0.060520\n",
       "dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['lwage','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term']].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "04912d34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "lwage               738230\n",
       "immig                    0\n",
       "gender                   0\n",
       "educ                     0\n",
       "married                  0\n",
       "fulltime                 0\n",
       "union                    0\n",
       "perm                     0\n",
       "large_firm               0\n",
       "postCOVID                0\n",
       "interaction_term         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['lwage','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term']].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "797a5ebf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lwage</th>\n",
       "      <th>immig</th>\n",
       "      <th>gender</th>\n",
       "      <th>educ</th>\n",
       "      <th>married</th>\n",
       "      <th>fulltime</th>\n",
       "      <th>union</th>\n",
       "      <th>perm</th>\n",
       "      <th>large_firm</th>\n",
       "      <th>postCOVID</th>\n",
       "      <th>interaction_term</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.045950</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3.442019</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.734368</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3.178054</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2.484907</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476889</th>\n",
       "      <td>3.896503</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>4.330733</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>3.784190</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>2.812410</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>3.464172</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>738666 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            lwage  immig  gender  educ  married  fulltime  union  perm  \\\n",
       "2        3.045950      0       0     1        1         1      0     1   \n",
       "5        3.442019      0       1     1        0         1      0     1   \n",
       "6        2.734368      0       0     1        1         0      0     1   \n",
       "12       3.178054      0       1     1        0         1      0     1   \n",
       "13       2.484907      0       0     1        0         1      0     1   \n",
       "...           ...    ...     ...   ...      ...       ...    ...   ...   \n",
       "1476889  3.896503      1       1     1        1         1      0     1   \n",
       "1476891  4.330733      0       0     1        0         1      0     1   \n",
       "1476893  3.784190      0       0     1        1         1      1     0   \n",
       "1476894  2.812410      0       0     0        0         0      0     0   \n",
       "1476895  3.464172      1       0     1        1         1      0     1   \n",
       "\n",
       "         large_firm  postCOVID  interaction_term  \n",
       "2                 1          0                 0  \n",
       "5                 0          0                 0  \n",
       "6                 0          0                 0  \n",
       "12                1          0                 0  \n",
       "13                0          0                 0  \n",
       "...             ...        ...               ...  \n",
       "1476889           1          1                 1  \n",
       "1476891           1          1                 0  \n",
       "1476893           1          1                 0  \n",
       "1476894           1          1                 0  \n",
       "1476895           1          1                 1  \n",
       "\n",
       "[738666 rows x 11 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[['lwage','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term']].dropna()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "670b12c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  lwage   R-squared:                       0.259\n",
      "Model:                            OLS   Adj. R-squared:                  0.259\n",
      "Method:                 Least Squares   F-statistic:                 2.578e+04\n",
      "Date:                Fri, 10 May 2024   Prob (F-statistic):               0.00\n",
      "Time:                        01:45:59   Log-Likelihood:            -3.9040e+05\n",
      "No. Observations:              738666   AIC:                         7.808e+05\n",
      "Df Residuals:                  738655   BIC:                         7.809e+05\n",
      "Df Model:                          10                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================\n",
      "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "const                2.3834      0.002   1103.483      0.000       2.379       2.388\n",
      "immig               -0.0893      0.002    -58.445      0.000      -0.092      -0.086\n",
      "gender               0.1072      0.001    110.206      0.000       0.105       0.109\n",
      "educ                 0.2510      0.002    146.482      0.000       0.248       0.254\n",
      "married              0.1740      0.001    176.634      0.000       0.172       0.176\n",
      "fulltime             0.2722      0.001    202.811      0.000       0.270       0.275\n",
      "union                0.1503      0.001    136.336      0.000       0.148       0.152\n",
      "perm                 0.1182      0.001     80.497      0.000       0.115       0.121\n",
      "large_firm           0.1355      0.001    127.385      0.000       0.133       0.138\n",
      "postCOVID            0.1404      0.001    119.448      0.000       0.138       0.143\n",
      "interaction_term     0.0249      0.003      9.407      0.000       0.020       0.030\n",
      "==============================================================================\n",
      "Omnibus:                    12904.028   Durbin-Watson:                   1.975\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            14617.584\n",
      "Skew:                           0.286   Prob(JB):                         0.00\n",
      "Kurtosis:                       3.386   Cond. No.                         12.9\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# Define dependent variable (y) and independent variables (X)\n",
    "y = df['lwage']\n",
    "X = df[['immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term']]\n",
    "\n",
    "# Drop rows with missing values in both X and y variables\n",
    "#df = df.dropna(df[['lwage','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term']])\n",
    "\n",
    "# Add constant term for intercept\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit OLS linear regression model\n",
    "model = sm.OLS(y, X)\n",
    "result = model.fit()\n",
    "\n",
    "# Print summary including coefficients, standard errors, p-values, and more\n",
    "print(result.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "9bc9b140",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9c0fa2ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['immig'] = 0\n",
    "df.loc[df['IMMIG'] != 3, 'immig'] = 1\n",
    "\n",
    "df['gender'] = 0\n",
    "df.loc[df['SEX'] == 1, 'gender'] = 1\n",
    "\n",
    "df['educ'] = 0\n",
    "df.loc[(df['EDUC'] != 0) & (df['EDUC'] != 1), 'educ'] = 1\n",
    "\n",
    "df['married'] = 0 \n",
    "df.loc[df['MARSTAT'] == 1, 'married'] = 1\n",
    "\n",
    "df['fulltime'] = 0 \n",
    "df.loc[df['FTPTMAIN'] == 1, 'fulltime'] = 1\n",
    "\n",
    "df['union'] = 0\n",
    "df.loc[df['UNION'] == 1, 'union'] = 1\n",
    "\n",
    "df['perm'] = 0\n",
    "df.loc[df['PERMTEMP'] == 1, 'perm'] = 1\n",
    "\n",
    "df['large_firm'] = 0\n",
    "df.loc[(df['FIRMSIZE'] != 1) & (df['FIRMSIZE'] != 2), 'large_firm'] = 1\n",
    "\n",
    "df['postCOVID'] = 0\n",
    "df.loc[df['SURVYEAR'] >= 2022, 'postCOVID'] = 1\n",
    "\n",
    "df['interaction_term'] = df['immig'] * df['postCOVID']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "93e1c9b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ATOTHRS             32.167648\n",
       "immig                0.184229\n",
       "gender               0.486489\n",
       "educ                 0.833986\n",
       "married              0.486791\n",
       "fulltime             0.478908\n",
       "union                0.154345\n",
       "perm                 0.435781\n",
       "large_firm           0.824076\n",
       "postCOVID            0.286469\n",
       "interaction_term     0.060520\n",
       "TENURE              95.296612\n",
       "dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['ATOTHRS','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term','TENURE']].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ab0995e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REC_NUM</th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>SURVMNTH</th>\n",
       "      <th>LFSSTAT</th>\n",
       "      <th>PROV</th>\n",
       "      <th>CMA</th>\n",
       "      <th>AGE_12</th>\n",
       "      <th>AGE_6</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARSTAT</th>\n",
       "      <th>...</th>\n",
       "      <th>educ</th>\n",
       "      <th>married</th>\n",
       "      <th>fulltime</th>\n",
       "      <th>union</th>\n",
       "      <th>perm</th>\n",
       "      <th>large_firm</th>\n",
       "      <th>postCOVID</th>\n",
       "      <th>interaction_term</th>\n",
       "      <th>work_hr</th>\n",
       "      <th>tenure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>89.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>37.5</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>103399</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>240.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476892</th>\n",
       "      <td>103400</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>103401</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>103402</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>103403</td>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>32.5</td>\n",
       "      <td>143.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1476896 rows Ã— 73 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         REC_NUM  SURVYEAR  SURVMNTH  LFSSTAT  PROV  CMA  AGE_12  AGE_6  SEX  \\\n",
       "0              1      2017         2        4    35    0       8    NaN    2   \n",
       "1              2      2017         2        1    59    9       3    5.0    1   \n",
       "2              3      2017         2        1    59    0       3    5.0    2   \n",
       "3              4      2017         2        4    35    0       9    NaN    1   \n",
       "4              5      2017         2        3    24    0      11    NaN    1   \n",
       "...          ...       ...       ...      ...   ...  ...     ...    ...  ...   \n",
       "1476891   103399      2023         8        1    24    1       7    NaN    2   \n",
       "1476892   103400      2023         8        3    46    6       6    NaN    1   \n",
       "1476893   103401      2023         8        1    46    0       3    5.0    2   \n",
       "1476894   103402      2023         8        1    12    0       1    1.0    2   \n",
       "1476895   103403      2023         8        1    35    0       6    NaN    2   \n",
       "\n",
       "         MARSTAT  ...  educ  married  fulltime  union  perm  large_firm  \\\n",
       "0              5  ...     1        0         0      0     0           1   \n",
       "1              6  ...     1        0         0      0     0           1   \n",
       "2              1  ...     1        1         1      0     1           1   \n",
       "3              5  ...     0        0         0      0     0           1   \n",
       "4              1  ...     1        1         0      0     0           1   \n",
       "...          ...  ...   ...      ...       ...    ...   ...         ...   \n",
       "1476891        5  ...     1        0         1      0     1           1   \n",
       "1476892        2  ...     1        0         0      0     0           1   \n",
       "1476893        1  ...     1        1         1      1     0           1   \n",
       "1476894        6  ...     0        0         0      0     0           1   \n",
       "1476895        1  ...     1        1         1      0     1           1   \n",
       "\n",
       "         postCOVID  interaction_term  work_hr  tenure  \n",
       "0                0                 0      NaN     NaN  \n",
       "1                0                 0     14.0    89.0  \n",
       "2                0                 0     37.5    18.0  \n",
       "3                0                 0      NaN     NaN  \n",
       "4                0                 0      NaN     NaN  \n",
       "...            ...               ...      ...     ...  \n",
       "1476891          1                 0     35.0   240.0  \n",
       "1476892          1                 0      NaN     NaN  \n",
       "1476893          1                 0     28.0    35.0  \n",
       "1476894          1                 0     23.0    14.0  \n",
       "1476895          1                 1     32.5   143.0  \n",
       "\n",
       "[1476896 rows x 73 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['work_hr'] = df['ATOTHRS']\n",
    "\n",
    "df['tenure'] = df['TENURE']\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "23e217c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "work_hr             611179\n",
       "immig                    0\n",
       "gender                   0\n",
       "educ                     0\n",
       "married                  0\n",
       "fulltime                 0\n",
       "union                    0\n",
       "perm                     0\n",
       "large_firm               0\n",
       "postCOVID                0\n",
       "interaction_term         0\n",
       "tenure              611179\n",
       "dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['work_hr','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term','tenure']].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0a13fb26",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['work_hr','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term','tenure']].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "510008bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_hr</th>\n",
       "      <th>immig</th>\n",
       "      <th>gender</th>\n",
       "      <th>educ</th>\n",
       "      <th>married</th>\n",
       "      <th>fulltime</th>\n",
       "      <th>union</th>\n",
       "      <th>perm</th>\n",
       "      <th>large_firm</th>\n",
       "      <th>postCOVID</th>\n",
       "      <th>interaction_term</th>\n",
       "      <th>tenure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>89.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>122.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476889</th>\n",
       "      <td>42.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476891</th>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>240.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476893</th>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476894</th>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1476895</th>\n",
       "      <td>32.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>143.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>865717 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         work_hr  immig  gender  educ  married  fulltime  union  perm  \\\n",
       "1           14.0      0       1     1        0         0      0     0   \n",
       "2           37.5      0       0     1        1         1      0     1   \n",
       "5           42.0      0       1     1        0         1      0     1   \n",
       "6           10.0      0       0     1        1         0      0     1   \n",
       "12          38.0      0       1     1        0         1      0     1   \n",
       "...          ...    ...     ...   ...      ...       ...    ...   ...   \n",
       "1476889     42.5      1       1     1        1         1      0     1   \n",
       "1476891     35.0      0       0     1        0         1      0     1   \n",
       "1476893     28.0      0       0     1        1         1      1     0   \n",
       "1476894     23.0      0       0     0        0         0      0     0   \n",
       "1476895     32.5      1       0     1        1         1      0     1   \n",
       "\n",
       "         large_firm  postCOVID  interaction_term  tenure  \n",
       "1                 1          0                 0    89.0  \n",
       "2                 1          0                 0    18.0  \n",
       "5                 0          0                 0   122.0  \n",
       "6                 0          0                 0    94.0  \n",
       "12                1          0                 0    45.0  \n",
       "...             ...        ...               ...     ...  \n",
       "1476889           1          1                 1    52.0  \n",
       "1476891           1          1                 0   240.0  \n",
       "1476893           1          1                 0    35.0  \n",
       "1476894           1          1                 0    14.0  \n",
       "1476895           1          1                 1   143.0  \n",
       "\n",
       "[865717 rows x 12 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[['work_hr','immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term','tenure']]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2a5eea12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                work_hr   R-squared:                       0.210\n",
      "Model:                            OLS   Adj. R-squared:                  0.210\n",
      "Method:                 Least Squares   F-statistic:                 2.086e+04\n",
      "Date:                Fri, 10 May 2024   Prob (F-statistic):               0.00\n",
      "Time:                        01:51:10   Log-Likelihood:            -3.6105e+06\n",
      "No. Observations:              865717   AIC:                         7.221e+06\n",
      "Df Residuals:                  865705   BIC:                         7.221e+06\n",
      "Df Model:                          11                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================\n",
      "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "const               16.0799      0.075    215.523      0.000      15.934      16.226\n",
      "immig                0.7749      0.053     14.511      0.000       0.670       0.880\n",
      "gender               4.1951      0.034    121.639      0.000       4.128       4.263\n",
      "educ                 0.4859      0.060      8.143      0.000       0.369       0.603\n",
      "married              0.0604      0.035      1.705      0.088      -0.009       0.130\n",
      "fulltime            19.4276      0.046    422.818      0.000      19.338      19.518\n",
      "union               -2.8851      0.041    -70.341      0.000      -2.966      -2.805\n",
      "perm                -1.4158      0.041    -34.490      0.000      -1.496      -1.335\n",
      "large_firm          -0.1762      0.039     -4.481      0.000      -0.253      -0.099\n",
      "postCOVID           -0.1767      0.042     -4.232      0.000      -0.258      -0.095\n",
      "interaction_term     0.1345      0.092      1.454      0.146      -0.047       0.316\n",
      "tenure              -0.0063      0.000    -29.716      0.000      -0.007      -0.006\n",
      "==============================================================================\n",
      "Omnibus:                    47566.030   Durbin-Watson:                   1.995\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           111857.129\n",
      "Skew:                          -0.345   Prob(JB):                         0.00\n",
      "Kurtosis:                       4.620   Cond. No.                         766.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "y = df['work_hr']\n",
    "X = df[['immig', 'gender', 'educ', 'married', 'fulltime', 'union', 'perm', 'large_firm', 'postCOVID', 'interaction_term','tenure']]\n",
    "\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit OLS linear regression model\n",
    "model = sm.OLS(y, X)\n",
    "result = model.fit()\n",
    "\n",
    "# Print summary including coefficients, standard errors, p-values, and more\n",
    "print(result.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "674c7fe7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
